{"version":3,"sources":["./src/app/components/position-display/position-display.component.ts","./src/app/components/position-display/position-display.component.html","./src/environments/environment.ts","./src/app/services/robot.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/robot-control/robot-control.component.ts","./src/app/components/robot-control/robot-control.component.html","./src/app/services/robot-simulator.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {RobotPosition, RobotService} from \"../../services/robot.service\";\n\nconst gridColor = '#FFFFFF30';\n\n@Component({\n  selector: 'position-display',\n  templateUrl: './position-display.component.html',\n  styleUrls: ['./position-display.component.css']\n})\nexport class PositionDisplayComponent implements OnInit {\n\n\n\n    @ViewChild('canvas', { static: true })\n    public canvas: ElementRef<HTMLCanvasElement> | null  = null;\n\n    private renderingContext: CanvasRenderingContext2D | null  = null;\n\n    constructor(private robot: RobotService) {\n      robot.robotPositionObservable.subscribe(value => {\n        this.displayRobotPosition(value);\n      })\n    }\n\n    ngOnInit(): void {\n      if(this.canvas) {\n        this.canvas.nativeElement.height = this.canvas.nativeElement.width\n\n        this.renderingContext = this.canvas.nativeElement.getContext('2d');\n\n        this.redrawGrid();\n\n      }\n    }\n\n  private redrawGrid() {\n    this.renderingContext?.clearRect(0, 0, this.canvas!!.nativeElement.width, this.canvas!!.nativeElement.height)\n\n    let spaceBetweenGridLines = this.getSpaceBetweenGridLines()\n    for (var i = 0; i < this.robot.getMaxGridPosition(); i++) {\n      this.drawLine((i + 1) * spaceBetweenGridLines, (i + 1) * spaceBetweenGridLines, 0, 1);\n      this.drawLine(0, 1, (i + 1) * spaceBetweenGridLines, (i + 1) * spaceBetweenGridLines);\n    }\n  }\n\n  private getSpaceBetweenGridLines() {\n    return 1.0 / (this.robot.getMaxGridPosition() + 1.0);\n  }\n\n  private drawLine(xPercentStart: number, xPercentEnd: number, yPercentStart: number, yPercentEnd: number) {\n      if (this.renderingContext && this.canvas) {\n        const __ret = this.mapPercentCoordinateToPixel(xPercentStart);\n        this.renderingContext.strokeStyle = gridColor;\n        this.renderingContext.lineCap = 'round';\n        this.renderingContext.lineJoin = \"round\";\n\n        this.renderingContext.moveTo(this.mapPercentCoordinateToPixel(xPercentStart), this.mapPercentCoordinateToPixel(yPercentStart));\n        this.renderingContext.lineTo(this.mapPercentCoordinateToPixel(xPercentEnd), this.mapPercentCoordinateToPixel(yPercentEnd));\n        this.renderingContext.stroke();\n      }\n    }\n\n  private mapPercentSizeToPixel(percentValue: number) {\n    var result = 0\n    if(this.canvas) {\n      var squareSideInPixels = this.canvas.nativeElement.width;\n      var drawZonePercents = 0.7\n      var drawZoneSizeInPixels = squareSideInPixels * drawZonePercents\n\n      result = percentValue * drawZoneSizeInPixels\n    }\n    return result\n  }\n\n  private mapPercentCoordinateToPixel(percentValue: number) {\n      var result = 0\n      if(this.canvas) {\n        var squareSideInPixels = this.canvas.nativeElement.width;\n        var drawZonePercents = 0.7\n        var drawStart = ((1 - drawZonePercents) / 2) * squareSideInPixels\n\n        result = drawStart + this.mapPercentSizeToPixel(percentValue)\n      }\n      return result\n  }\n\n  private displayRobotPosition(position: RobotPosition) {\n    let renderingContext = this.renderingContext;\n    if(renderingContext) {\n      this.redrawGrid()\n\n      let spaceBetweenGridLines = this.getSpaceBetweenGridLines()\n\n      let margin = 0.1\n\n      let xPercents = (position.xPosition + margin) * spaceBetweenGridLines\n      let yPercents = ((this.robot.getMaxGridPosition() - position.yPosition) + margin) * spaceBetweenGridLines\n      let sizePercents = spaceBetweenGridLines * (1 - 2*margin)\n\n      let xPixels = this.mapPercentCoordinateToPixel(xPercents)\n      let yPixels = this.mapPercentCoordinateToPixel(yPercents)\n      let sizeInPixels = this.mapPercentSizeToPixel(sizePercents)\n\n      if(renderingContext) {\n        var image = document.createElement(\"img\");\n        image.onload=function(){\n          if(renderingContext)\n            renderingContext.drawImage(image, xPixels, yPixels, sizeInPixels, sizeInPixels)\n        }\n        image.src='./assets/robot-'+position.direction+'.png'\n      }\n\n    }\n  }\n}\n","<div class=\"card m-2\">\n  <div class=\"card-header\">\n    Last known robot position\n  </div>\n  <div>\n    <canvas #canvas class=\"mars-canvas\">\n\n\n    </canvas>\n  </div>\n</div>\n\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport {RobotSimulator} from \"./robot-simulator.service\";\r\nimport {Subject} from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RobotService {\r\n  private commandsHistory: string[] = []\r\n  private outputs: string[] = []\r\n  private log: string[] = []\r\n  public robotPositionObservable = new Subject<RobotPosition>();\r\n\r\n  /**\r\n   * The current implementation simply injects a local client-side RobotSimulator, a remote implementation might also be used to call a backend simulator\r\n   * @param simulator\r\n   */\r\n  constructor(private simulator : RobotSimulator) {\r\n\r\n  }\r\n\r\n  getCommandsHistory() {\r\n    return this.commandsHistory\r\n  }\r\n\r\n  getOutputs() {\r\n    return this.outputs\r\n  }\r\n\r\n  executeCommand(command: RobotCommand) {\r\n    let commandStr = command.toString();\r\n    this.executeTextCommand(commandStr)\r\n  }\r\n\r\n  private addLog(log: string) {\r\n    this.log.push(\"[\" + new Date().toISOString() + \"] \" + log)\r\n  }\r\n\r\n  getCommandTypes() {\r\n    return this.simulator.commandTypes.filter(type => (type == \"PLACE\") != this.simulator.isPlaced() )\r\n  }\r\n\r\n  getMaxGridPosition() {\r\n    return this.simulator.maxGridPosition\r\n  }\r\n\r\n  getDirections() {\r\n    return this.simulator.directions\r\n  }\r\n\r\n  initNewCommand() {\r\n    let command = new RobotCommand()\r\n    if(this.simulator.isPlaced()) {\r\n      command.type = \"MOVE\"\r\n    }\r\n    return command;\r\n  }\r\n\r\n  private parsePosition(report: string) {\r\n    let robotPosition = new RobotPosition();\r\n\r\n    let parsed_report = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\w+)\\s*$/.exec(report)\r\n    if(parsed_report) {\r\n      robotPosition.xPosition = +parsed_report[1]\r\n      robotPosition.yPosition = +parsed_report[2]\r\n      robotPosition.direction = parsed_report[3]\r\n    }\r\n    return robotPosition;\r\n  }\r\n\r\n  getLogs() {\r\n    return this.log\r\n  }\r\n\r\n  executeTextCommand(textCommand: any) {\r\n    this.commandsHistory.push(textCommand)\r\n    this.addLog(\">> \" + textCommand);\r\n\r\n    let output = this.simulator.executeCommand(textCommand)\r\n    if(output && output.length > 0) {\r\n      this.outputs.push(output)\r\n      this.addLog(\"<< \" + output);\r\n\r\n      this.robotPositionObservable.next(this.parsePosition(output))\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class RobotPosition {\r\n  public xPosition: number = 0\r\n  public yPosition: number = 0\r\n  public direction: string = \"NORTH\"\r\n}\r\n\r\n\r\nexport class RobotCommand {\r\n  public type: string = \"PLACE\"\r\n  public xPosition: number = 0\r\n  public yPosition: number = 0\r\n  public direction: string = \"NORTH\"\r\n\r\n\r\n  toString() {\r\n    if(this.type == \"PLACE\") {\r\n      return this.type + \" \" + this.xPosition + \", \" + this.yPosition + \", \" + this.direction\r\n    } else {\r\n      return this.type\r\n    }\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'robot-control-frontend';\n  active = 'gui';\n}\n","<nav class=\"navbar navbar-dark bg-dark\">\n  <a class=\"navbar-brand\" href=\"#\">\n    <img src=\"./assets/robot-SOUTH.png\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\">\n    Mars robot remote control\n  </a>\n</nav>\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <robot-control></robot-control>\n\n  </div>\n  <div class=\"col-md-6\">\n    <position-display></position-display>\n  </div>\n</div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport {RobotControlComponent} from \"./components/robot-control/robot-control.component\";\nimport {PositionDisplayComponent} from \"./components/position-display/position-display.component\";\nimport { FormsModule }        from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RobotControlComponent,\n    PositionDisplayComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    NgbModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\nimport {RobotService} from \"../../services/robot.service\";\nimport {RobotCommand} from \"../../services/robot.service\";\n\n@Component({\n  selector: 'robot-control',\n  templateUrl: './robot-control.component.html',\n  styleUrls: ['./robot-control.component.css']\n})\nexport class RobotControlComponent {\n  public commandForm: RobotCommand = new RobotCommand();\n\n  public automaticReport: boolean = true\n  public rawTextControl: boolean = false\n  textCommand: string = ''\n\n  constructor(public robot: RobotService) { }\n\n  executeCommand() {\n    this.robot.executeCommand(this.commandForm)\n    if(this.automaticReport && this.commandForm.type != \"REPORT\") {\n      this.executeCommandByName(\"REPORT\");\n    }\n    this.commandForm = this.robot.initNewCommand()\n  }\n\n  executeRawTextCommand() {\n    this.robot.executeTextCommand(this.textCommand)\n    this.textCommand = ''\n    this.commandForm = this.robot.initNewCommand()\n  }\n\n  executeCommandByName(type: string ) {\n    let reportCommand = new RobotCommand();\n    reportCommand.type = type\n    this.robot.executeCommand(reportCommand)\n    if(this.automaticReport && type != \"REPORT\") {\n      this.executeCommandByName(\"REPORT\");\n    }\n  }\n\n  changeType(event: Event) {\n    if(event.target) {\n      this.commandForm.type = (<HTMLInputElement>event.target).value\n    }\n  }\n\n  changeDirection(event: Event) {\n    if(event.target) {\n      this.commandForm.direction = (<HTMLInputElement>event.target).value\n    }\n  }\n\n  toggleAutomaticReports() {\n    this.automaticReport = !this.automaticReport\n  }\n\n}\n\n","<div class=\"card m-2\">\n  <div class=\"card-header\">\n    <div class=\"row\">\n      <div class=\"col-4\">\n        Remote control\n      </div>\n      <div class=\"col-4 text-right\">\n        <div class=\"custom-control custom-checkbox\">\n          <input class=\"custom-control-input\" id=\"rawControl\" type=\"checkbox\" [(ngModel)]=\"rawTextControl\"/>\n          <label class=\"custom-control-label\" for=\"rawControl\">Raw text input</label>\n        </div>\n      </div>\n      <div class=\"col-4 text-right\">\n        <div class=\"custom-control custom-checkbox\" *ngIf=\" !rawTextControl\">\n          <input class=\"custom-control-input\" id=\"autoReport\" type=\"checkbox\" [(ngModel)]=\"automaticReport\"/>\n          <label class=\"custom-control-label\" for=\"autoReport\">Always get report</label>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <ul class=\"list-group list-group-flush\">\n    <li class=\"list-group-item\">\n      <div *ngIf=\"rawTextControl\">\n        <div class=\"p-1 form-group row\">\n          <label class=\"col-3\" for=\"rawtext\">Command </label>\n          <input class=\"form-control col-9\" id=\"rawtext\" type=\"text\" [(ngModel)]=\"textCommand\"/>\n        </div>\n        <div class=\"mt-2 text-right\">\n          <button type=\"button\" (click)=\"executeRawTextCommand()\" class=\"btn btn-primary\">\n            Execute\n          </button>\n        </div>\n      </div>\n\n      <div *ngIf=\"commandForm.type == 'PLACE' && !rawTextControl\">\n        <div class=\"p-1\">\n          Where will the spaceship drop the robot ?\n        </div>\n        <div class=\"p-1 form-group row\">\n          <label class=\"col-3\" for=\"x\">X </label>\n          <input class=\"form-control col-9\" id=\"x\" type=\"number\" min=\"0\" max=\"{{robot.getMaxGridPosition()}}\"\n                 [(ngModel)]=\"commandForm.xPosition\"/>\n        </div>\n        <div class=\"p-1 form-group row\">\n          <label class=\"col-3\" for=\"y\">Y </label>\n          <input class=\"form-control col-9\" id=\"y\" type=\"number\" min=\"0\" max=\"{{robot.getMaxGridPosition()}}\"\n                 [(ngModel)]=\"commandForm.yPosition\"/>\n        </div>\n        <div class=\"p-1 form-group row\">\n          <label class=\"col-3\" for=\"direction\">Direction </label>\n          <div class=\"col-9\">\n            <select id=\"direction\" class=\"browser-default custom-select\" [(ngModel)]=\"commandForm.direction\"\n                    (change)=\"changeDirection($event)\">\n              <option *ngFor=\"let dir of robot.getDirections()\" value=\"{{dir}}\">{{dir}}</option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"mt-2 text-right\">\n          <button type=\"button\" (click)=\"executeCommand()\" class=\"btn btn-primary\">\n            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-cloud-download\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path fill-rule=\"evenodd\" d=\"M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z\"/>\n              <path fill-rule=\"evenodd\" d=\"M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z\"/>\n            </svg>\n            Drop robot\n          </button>\n        </div>\n      </div>\n      <div *ngIf=\"commandForm.type != 'PLACE' && !rawTextControl\" class=\"pl-5 pr-5\">\n        <div class=\"row\">\n          <div class=\"col-4 offset-4 text-center\">\n            <button type=\"button\" (click)=\"executeCommandByName('MOVE')\" class=\"btn btn-primary\">\n              <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"/>\n              </svg>\n              Move\n            </button>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-4 \">\n            <button type=\"button\" (click)=\"executeCommandByName('LEFT')\" class=\"btn btn-primary\">\n              <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-90deg-left\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" d=\"M1.146 4.854a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 4H12.5A2.5 2.5 0 0 1 15 6.5v8a.5.5 0 0 1-1 0v-8A1.5 1.5 0 0 0 12.5 5H2.707l3.147 3.146a.5.5 0 1 1-.708.708l-4-4z\"/>\n              </svg>\n              Turn left\n            </button>\n          </div>\n          <div class=\"col-4 offset-4 text-right\">\n            <button type=\"button\" (click)=\"executeCommandByName('RIGHT')\" class=\"btn btn-primary\">\n              <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrow-90deg-right\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" d=\"M14.854 4.854a.5.5 0 0 0 0-.708l-4-4a.5.5 0 0 0-.708.708L13.293 4H3.5A2.5 2.5 0 0 0 1 6.5v8a.5.5 0 0 0 1 0v-8A1.5 1.5 0 0 1 3.5 5h9.793l-3.147 3.146a.5.5 0 0 0 .708.708l4-4z\"/>\n              </svg>\n              Turn right\n            </button>\n          </div>\n        </div>\n        <div class=\"row\" *ngIf=\"!automaticReport\">\n          <div class=\"col-4 offset-4 text-center\">\n            <button type=\"button\" (click)=\"executeCommandByName('REPORT')\" class=\"btn btn-secondary\">Get position report</button>\n          </div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n\n<div class=\"card m-2 d-none d-md-block\">\n  <div class=\"card-header\">\n    Communication log\n  </div>\n  <ul class=\"list-group list-group-flush\">\n    <li class=\"list-group-item\">\n      <div class=\"scrollable\">\n        <p *ngFor=\"let out of robot.getLogs().reverse()\">\n          {{ out }}\n        </p>\n      </div>\n    </li>\n  </ul>\n</div>\n","import {Injectable} from '@angular/core';\r\n\r\n\r\nconst north = \"NORTH\"\r\nconst east = \"EAST\"\r\nconst south = \"SOUTH\"\r\nconst west = \"WEST\"\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RobotSimulator {\r\n  commandTypes: string[] = [\"MOVE\", \"LEFT\", \"RIGHT\", \"REPORT\", \"PLACE\"]\r\n\r\n  directions: string[] = [north, east, south, west]\r\n  maxGridPosition: number = 4;\r\n\r\n  private activeRobot: Robot = new Robot(this.maxGridPosition, this.directions)\r\n\r\n\r\n  executeCommand(command: string): string | null {\r\n    let parsed_place_command = /^\\s*PLACE\\s+(\\d)\\s*,\\s*(\\d)\\s*,\\s*(\\w+)\\s*$/.exec(command)\r\n    var result = null\r\n    if (parsed_place_command) {\r\n      this.activeRobot.place(+parsed_place_command[1], +parsed_place_command[2], parsed_place_command[3])\r\n    } else if(this.activeRobot.isPlaced) {\r\n      if (command == \"MOVE\") {\r\n        this.activeRobot.move()\r\n      } else if (command == \"LEFT\") {\r\n        this.activeRobot.left()\r\n      } else if (command == \"RIGHT\") {\r\n        this.activeRobot.right()\r\n      } else if (command == \"REPORT\") {\r\n        result = this.activeRobot.report()\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  isPlaced() {\r\n    return this.activeRobot.isPlaced;\r\n  }\r\n}\r\n\r\nclass Robot {\r\n  constructor(private maxGridPosition: number, private directions: string[]) {\r\n\r\n  }\r\n\r\n  private x : number = 0\r\n  private y : number = 0\r\n  private direction : string = north\r\n  isPlaced : boolean = false\r\n\r\n  place(x: number, y: number, direction: string) {\r\n    let succeeded = this.to(x, y, direction)\r\n    if(succeeded) {\r\n      this.isPlaced = true\r\n    }\r\n  }\r\n\r\n  private isValidPosition(x: number, y: number, direction: string) : boolean {\r\n    return 0 <= x\r\n      && 0 <= y\r\n      && x <= this.maxGridPosition\r\n      && y <= this.maxGridPosition\r\n      && this.directions.includes(direction)\r\n  }\r\n\r\n  private to(x: number, y: number, direction: string = this.direction) : boolean {\r\n    if(this.isValidPosition(x, y, direction)) {\r\n      this.x = x\r\n      this.y = y\r\n      this.direction = direction\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  report() : string {\r\n    return this.x + \", \" + this.y + \", \" + this.direction\r\n  }\r\n\r\n  left() {\r\n    let currentDirectionIndex = this.directions.indexOf(this.direction)\r\n    if(currentDirectionIndex == 0) {\r\n      this.direction = this.directions[this.directions.length - 1]\r\n    } else {\r\n      this.direction = this.directions[currentDirectionIndex - 1]\r\n    }\r\n  }\r\n\r\n  right() {\r\n    let currentDirectionIndex = this.directions.indexOf(this.direction)\r\n    this.direction = this.directions[(currentDirectionIndex + 1 ) % this.directions.length]\r\n  }\r\n\r\n  move() {\r\n    if(this.direction == north) {\r\n      this.to(this.x, this.y +1)\r\n    } else if(this.direction == south) {\r\n      this.to(this.x, this.y -1)\r\n    } else if(this.direction == east) {\r\n      this.to(this.x+1, this.y)\r\n    } else if(this.direction == west) {\r\n      this.to(this.x-1, this.y)\r\n    }\r\n  }\r\n}\r\n\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}